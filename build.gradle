plugins {
	id 'org.springframework.boot' version '2.4.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.27.0'
}

group = 'com.tripmaster'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = 1.8

repositories {
	mavenCentral()
	flatDir {
		dirs 'libs'
	}
}

//docker {
//	name "tourguide"
//	dockerfile file('src/docker/Dockerfile')
//	copySpec().from(jar).rename(".*","tourguide.jar")
//	buildArgs(['JAR_FILE': "tourguide.jar"])
//}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"

dependencies {
	implementation group: 'org.zalando', name: 'jackson-datatype-money', version: '1.2.1' // Jackson module to support JSON serialization and deserialization of JavaMoney
	implementation group: 'org.javamoney', name: 'moneta', version: '1.3'
	implementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.0.1'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation group: 'org.javamoney', name: 'moneta', version: '1.3'
	implementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
	testImplementation("junit:junit")
	testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.6.RELEASE'
}

jacoco {
	toolVersion = "0.8.7"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // End the test task by doing a jacoco report

	jacocoTestReport {
		dependsOn test // Tests are required to run before generating the report
		finalizedBy jacocoTestCoverageVerification // End with a jacoco code coverage verification

		reports {
			xml.enabled true
			csv.enabled false
			html.enabled true
			html.destination file("build/reports/jacocoHtml")
		}
		afterEvaluate {
			getClassDirectories().setFrom(classDirectories.files.collect {
				fileTree(dir: it,
						exclude: [
								'**/user/*.class',
								'**/util/*.class',
						]
				)
			})
		}
	}
}